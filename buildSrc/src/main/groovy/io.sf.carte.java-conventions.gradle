plugins {
	id 'java-library'
	id 'maven-publish'
	id 'org.gradlex.extra-java-module-info'
}

repositories {
	maven {
		url = uri('https://repo.maven.apache.org/maven2/')
	}
	maven {
		url "https://css4j.github.io/maven/"
		mavenContent {
			releasesOnly()
		}
		content {
			includeGroup "com.github.css4j"
			includeGroup "io.sf.carte"
			includeGroup "io.sf.jclf"
		}
	}
}

group = 'io.sf.carte'
version = '0.1.0-SNAPSHOT'

sourceSets {
	main {
		java {
			srcDirs = ['src']
		}
		resources {
			srcDirs = ['src']
			excludes += ["**/*.java"]
		}
	}
	test {
		java {
			srcDirs = ['junit']
		}
		resources {
			srcDirs = ['junit']
			excludes += ["**/*.java"]
		}
	}
}

java {
	sourceCompatibility = JavaVersion.VERSION_11
	withJavadocJar()
	withSourcesJar()
	registerFeature('jfreechart') {
		usingSourceSet(sourceSets.main)
	}
	registerFeature('xchart') {
		usingSourceSet(sourceSets.main)
	}
}

dependencies {
	implementation "io.sf.carte:xml-dtd:${xmlDtdVersion}"
	api "io.sf.carte:css4j:${css4jVersion}"
	implementation "nu.validator:htmlparser:${htmlparserVersion}"
}

extraJavaModuleInfo {
	automaticModule("htmlparser-${htmlparserVersion}.jar", 'htmlparser')
	automaticModule('com.madgag:animated-gif-lib', 'com.madgag.gif.fmsware')
	automaticModule('commons-io:commons-io', 'commons.io')
	automaticModule('commons-logging:commons-logging', 'commons.logging')
	automaticModule("org.apache.xmlgraphics:xmlgraphics-commons", 'xmlgraphics.commons')
	automaticModule('de.erichseifert.vectorgraphics2d:VectorGraphics2D', 'vectorgraphics2d')
}

tasks.register('jvmVersionAttribute') {
	description = "Set the correct 'org.gradle.jvm.version' attribute"
	dependsOn compileJava
	if (!project.getPluginManager().hasPlugin('eclipse')) {
		def jvmVersionAttribute = Attribute.of('org.gradle.jvm.version', Integer)
		configurations.each {
			if (it.canBeConsumed) {
				def categoryAttr = it.attributes.getAttribute(Category.CATEGORY_ATTRIBUTE)
				if (categoryAttr != null && categoryAttr.name == Category.LIBRARY) {
					def usageAttr = it.attributes.getAttribute(Usage.USAGE_ATTRIBUTE)
					if (usageAttr != null && (usageAttr.name == Usage.JAVA_API
							|| usageAttr.name == Usage.JAVA_RUNTIME)) {
						it.attributes.attribute(jvmVersionAttribute, 8)
					}
				}
			}
		}
	}
}

tasks.register('compileLegacyJava', JavaCompile) {
	description = 'Compile to Java 8 bytecode, except module-info'
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
	source = sourceSets.main.java
	dependsOn configurations.compileClasspath
	classpath = sourceSets.main.compileClasspath
	destinationDirectory = sourceSets.main.java.destinationDirectory
	modularity.inferModulePath = false
	excludes = ['module-info.java']
}

compileJava {
	includes = ['module-info.java']
	dependsOn compileLegacyJava
	classpath = sourceSets.main.compileClasspath
}

// Check bytecode version, in case some other task screws it
tasks.register('checkLegacyJava') {
	description = 'Check Java 8 bytecode'
	enabled = enabled && !project.getPluginManager().hasPlugin('eclipse')
	def classdir = sourceSets.main.output.classesDirs.files.stream().findAny().get()
	def classfiles = fileTree(classdir).matching({it.exclude('module-info.class')}).files
	doFirst() {
		if (!classfiles.isEmpty()) {
			def classfile = classfiles.stream().findAny().get()
			if (classfile != null) {
				def classbytes = classfile.bytes
				def bcversion = classbytes[6] * 128 + classbytes[7]
				if (bcversion != 52) {
					throw new GradleException("Bytecode on " + classfile +
							" is not valid Java 8. Version should be 52, instead is " + bcversion)
				}
			}
		}
	}
}

classes.dependsOn jvmVersionAttribute
classes.finalizedBy checkLegacyJava
jar.dependsOn checkLegacyJava

publishing {
	publications {
		maven(MavenPublication) {
			from(components.java)
			suppressAllPomMetadataWarnings()
		}
	}
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
	options.addStringOption('encoding', 'UTF-8')
	options.addStringOption('charset', 'UTF-8')
	options.links 'https://docs.oracle.com/en/java/javase/11/docs/api/'
}

tasks.register('cleanBuildSrc') {
	description = 'Clean the buildSrc directory'
	doLast {
		delete("$rootDir/buildSrc/build")
	}
}

tasks.named('clean') {
	finalizedBy('cleanBuildSrc')
}

tasks.register('lineEndingConvCopy', CRLFConvertCopy) {
	description 'Convert LICENSE.txt to Windows line endings'
	from "$rootDir/LICENSE.txt"
}

tasks.withType(AbstractArchiveTask).configureEach {
	// Reproducible build
	preserveFileTimestamps = false
	reproducibleFileOrder = true
	// Copy license file
	dependsOn lineEndingConvCopy
	from ("$buildDir/tmp/crlf/LICENSE.txt") {
		into 'META-INF'
	}
}
